//individual-based SIR model
//Anna Maria Langmueller for Messer Lab

initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy", periodicity="xy"); //2D, periodic boundaries 
	
	if(exists("slimgui")) {
		defineConstant("D", 1e-6); //diffusion coefficient (SD in movement = sqrt(2D))
		defineConstant("R",15); //number of average contacts per cycle; determines interaction radius
		defineConstant("ALPHA",0.01); //disease establishment proportion
		defineConstant("INFTICKS",50); //number if "ticks" an individual remains infectious
		defineConstant("N",10000); //number of individuals 
		defineConstant("STORE",1); //index for storage 
	}
	
	defineConstant("SD_MOVE", sqrt(2*D)); //standard deviation movement (derived)
	defineConstant("DELTA_I", sqrt((1*R)/(N*PI))); //interaction distance between individuals (derived)
	
	defineConstant("HEALTH_I",INFTICKS); //tag, infectous individuals (derived)
	
	defineConstant("HEALTH_S",-1); //tag, susceptible individuals
	defineConstant("HEALTH_E",-2); //tag, exposed individuals
	defineConstant("HEALTH_IR",-3); //tag, infectious individuals queued for recovery
	defineConstant("HEALTH_R",-4); //tag, recovered individuals
	
	
	defineConstant("ID",getSeed()); //random seed 
	filename=paste("SIR-",STORE,".txt",sep=""); //storage simulation params
	defineConstant("FILENAME",filename);
	filenameIvsT=paste("SIR-",STORE,"-IvsT.txt",sep=""); //storage i(t)
	defineConstant("FILENAMEIvsT",filenameIvsT);
	
	initializeInteractionType(1,"xy", reciprocal=T, maxDistance=DELTA_I); //contacts
	initializeInteractionType(2,"xy",reciprocal=T,maxDistance=0.25); //infection seed
	
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99);
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.0);
}


reproduction() { //no demography
	self.active = 0;
}

1 early() { //set up
	if(exists("slimgui")) {
		catn("Interaction radius: "+ DELTA_I);
		catn("SD dispersal: " + SD_MOVE);
	}
	sim.addSubpop("p1", asInteger(N));
	inds=p1.individuals;
	p1.setSpatialBounds(c(0.0,0.0,1.0,1.0)); //square with area of 1
	inds.tag=HEALTH_S;
	inds.setSpatialPosition(p1.pointUniform(p1.individualCount));

}

25 early() { //introduce infection
	i2.evaluate(sim.subpopulations);
	seed = i2.nearestNeighborsOfPoint(c(0.5,0.5),p1,1); //seed infection in the middle of the square 
	seed.tag=HEALTH_I; //seed infection
	inds=p1.individuals;
	out=paste("GEN:",sim.cycle-25," S:", sum(inds.tag==HEALTH_S)," I:",sum(inds.tag>0)," R:", sum(inds.tag==HEALTH_R),sep=""); //track SIR counts
	if(!exists("slimgui")){
		writeFile(FILENAMEIvsT,out);
	} else {
		catn(out);
	}
}

early() { //colors 
	inds = p1.individuals;
	inds_tags=inds.tag;
	inds[inds_tags == HEALTH_S].color = "#381a61";
	inds[inds_tags == HEALTH_E].color = "violet";
	inds[inds_tags == HEALTH_I].color = "#ab3329";
	inds[inds_tags == HEALTH_R].color = "#bfbcb4";
}

26:50000 early() { //propagate infection 
	
	inds=p1.individuals;
	infected=inds[inds.tag>0]; //relies on non-infectious tags being <0; 
	i1.evaluate(sim.subpopulations);
	
	for(i in infected) { //for each infected individual
		contact = i1.nearestNeighbors(i,p1.individualCount); //determine contacts
		if(length(contact)>0) {
			exposed = contact[(contact.tag==HEALTH_S | contact.tag==HEALTH_E)]; //restrict to exposed+susceptible individuals
			if(length(exposed)>0) {
				strength = runif(length(exposed),min=0,max=1);//sample infection strength
				exposed = exposed[strength<=ALPHA]; //determine newly infected individuals
				if(length(exposed)>0) exposed.tag = HEALTH_E; //change infection status to exposed
			}
		}
		i.tag = i.tag - 1; //reduce number of infectious days 
		if (i.tag == 0) i.tag = HEALTH_IR;  //queue recovery after INFTICKS infectious ticks
	}
	
	inds=p1.individuals; //change exposed --> infectious
	exposed=inds[inds.tag==HEALTH_E];
	exposed.tag=HEALTH_I;
	torecover=inds[inds.tag==HEALTH_IR];
	torecover.tag=HEALTH_R; //change infectious --> recovered
	
	out=paste("GEN:",sim.cycle-25," S:", sum(inds.tag==HEALTH_S)," I:",sum(inds.tag>0), " R:", sum(inds.tag==HEALTH_R),sep=""); //track SIR counts
	if(!exists("slimgui")){
		writeFile(FILENAMEIvsT,out,append=T);
	} else {
		catn(out);
	}

}

1:50000 late() { //movement
	inds=p1.individuals;
	
	pos = inds.spatialPosition; //change spatial position of individuals
	posold = pos;
	pos = pos + rnorm(2*length(inds),mean=0,sd=SD_MOVE);
	inds.setSpatialPosition(p1.pointPeriodic(pos));
	
	if(sim.cycle>=25) { //if infection was seeded
		
		if((sum(inds.tag==HEALTH_S)==0) | (sum(inds.tag>0)==0)) { //if disease spread/lost (i.e., no susceptibles/infectious individuals) 
			out=paste(ID,D,R,N,ALPHA,INFTICKS,DELTA_I,SD_MOVE,(sim.cycle-25),sep="\t");
			hout=paste("SEED","D","R","N","ALPHA","INFTICKS","DELTA_I","SD_MOVE","TOBS",sep="\t");
			
			
			if(exists("slimgui")){
				catn(hout);
				catn(out);
			} else {
				writeFile(FILENAME,hout);
				writeFile(FILENAME,out,append=T);
			}
			sim.simulationFinished();
		}
	}
}